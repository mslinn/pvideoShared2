# FIXME Reads 2,918,400 bytes and stops, but video is >9MB

import boto3, logging, json, os
from base64 import b64decode
from urlparse import parse_qs
from subprocess import call, Popen, PIPE
from sys import stderr, stdout
from threading import Thread

logger = logging.getLogger()
logger.setLevel(logging.INFO)

buffer_size = 10240


def s3_bucket_key(video_url):
    """
    Converts an URL (using http or https protocols) for a video stored in an AWS S3 bucket that is configured to act
    as a web server into the s3:// protocol understood by AWS CLI
    :param video_url: URL of video in a bucket
    :return: video URL using s3:// protocol
    """
    from urlparse import urlparse
    parsed_url = urlparse(video_url)
    bucket = parsed_url.netloc[: -len(".s3.amazonaws.com")]
    key = parsed_url.path[1:]
    return bucket, key


def personalize(user_name, video_url):
    """
    Transform video with the given URL so it has the first 5 seconds overlaid with generated graphics.
    Buffers from S3 bucket object are copied to STDIN of ffmpeg_process, buffer_size bytes at a time,
    which streams the video at video_url to STDOUT.
    ffmpeg_process the streamed video from cat_process from STDIN, processes the video, and streams the output to STDOUT.
    FIXME: only a portion of the video is processed. 
    :param user_name: Name to be imprinted on video
    :param video_url: URL of video to transform
    :return: Streamed video, sent to STDOUT
    """
    enable = "enable"
    font_file = "fontfile='fonts/DejaVuSerif.ttf'"
    font = "fontsize=48: fontcolor=black: {0}".format(font_file)
    first_5_seconds = "{0}='lt(t,5)'".format(enable)
    box = "drawbox=x=0: y=0: w=1920: h=135: t=68: color=yellow@1: {0}".format(first_5_seconds)
    draw_text = "drawtext=text='Licensed to': x='(main_w-text_w)/2': y=20: {0}: {1}, " \
                "drawtext=text='{2}': x='(main_w-text_w)/2': y=80: {3}: {4}".format(font, first_5_seconds, user_name, font, first_5_seconds)

    cmd = [
            "ffmpeg",
             "-i", "pipe:0",
             "-v", "warning",
             "-strict", "experimental",
             "-vf", "{0}, {1}".format(box, draw_text),
             "-y",
             "-f", "mp4",
             "-movflags", "frag_keyframe",
             "pipe:1"
          ]

    s3 = boto3.resource('s3')
    bucket, key = s3_bucket_key(video_url)
    response = s3.Object(bucket_name=bucket, key=key).get()
    huge_body = response['Body']

    ffmpeg_process = Popen(cmd, stdin=PIPE, stdout=PIPE)

    thread = Thread(target = copy_chunks, args = (ffmpeg_process, huge_body))
    thread.start()  # thread completion terminates program
    return ffmpeg_process.stdout


def copy_chunks(ffmpeg_process, huge_body):
    """
    Runs on another thread
    """
    total_bytes = 0L
    while True:
        data = huge_body.read(amt=buffer_size)
        if not data:
            ffmpeg_process.stdin.close()
            if command_line:
                stderr.write("\nDone!\n")
            return
        else:
            if command_line:
                total_bytes += len(data)
                stderr.write("\r\x1B[KRead {:,} bytes".format(total_bytes))
            ffmpeg_process.stdin.write(data)
            ffmpeg_process.stdout.flush()


def lambda_handler(event, context):
    """
    Entry point when invoked as an AWS Lambda.
    :param event: Incoming event to process containing parameters
    :param context: Ignored
    :return: STDOUT (streamed video generated by personalize function). Hopefully STDOUT won't be buffered.
    """
    user_name = event['userName']
    #cadenza_instance = event['cadenzaInstance']
    video_url = event['videoUrl']
    user_id = event['userId']

    if command_line:
        stderr.write("Running from command line so HTTP headers will not be emitted\r\n")
    else:
        print('Content-Type','video/mp4')
        print('Content-Disposition', 'inline; filename="{0}"'.format("scalaCoursesLecture.mp4"))
    return personalize(user_name, video_url)


if __name__ == "__main__":
    """
    Entry point when run from command line. Sets command_line flag.
    """

    class TestContext(object):  # fake object
        function_name = "++MAIN++"

    logging.basicConfig()

    test_video_url = "http://www.scalacoursestest.com.s3.amazonaws.com/1/html/ScalaCore/assets/videos/tx/course_scalaIntermediate_Web.mp4"

    test_event = {
        "userName": "Fred Flintstone",
        "videoUrl": test_video_url,
        "userId": "fred"
    }
    command_line = True
    lambda_handler(test_event, TestContext())
